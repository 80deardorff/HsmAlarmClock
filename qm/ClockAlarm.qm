<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <framework name="qpn"/>
 <package name="HSMs" stereotype="0x02">
  <class name="Clock_Alarm" superclass="qpn::QHsm">
   <attribute name="obj" type="Clock_Alarm" visibility="0x02" properties="0x01"/>
   <attribute name="curr_time" type="uint32_t" visibility="0x02" properties="0x01"/>
   <attribute name="alarm_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="temp_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="time_mode" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="temp_format" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="temp_digit" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeout" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_timeout" type="uint16_t" visibility="0x02" properties="0x00"/>
   <operation name="get_curr_time" type="uint32_t" visibility="0x00" properties="0x01">
    <documentation>This returns the value of curr_time</documentation>
    <code>uint8_t save_sreg = SREG;
cli();
uint32_t temp = Clock_Alarm_curr_time;
SREG = save_sreg;
return temp;</code>
   </operation>
   <operation name="update_curr_time" type="void" visibility="0x00" properties="0x01">
    <documentation>This updates the curr_time</documentation>
    <code>if(++Clock_Alarm_curr_time == MAX_TIME) {
        Clock_Alarm_curr_time = 0;
    }</code>
   </operation>
   <operation name="set_curr_time" type="void" visibility="0x00" properties="0x01">
    <documentation>This sets the curr_time</documentation>
    <parameter name="new_curr_time" type="uint32_t"/>
    <code>uint8_t save_sreg = SREG;
cli();
TCCR1B &amp;= ~(0x7U); //Stops the timer1
TCNT1 = 0U;
Clock_Alarm_curr_time = new_curr_time;
TCCR1B |= (0x4U); //Starts the timer1
SREG = save_sreg;</code>
   </operation>
   <operation name="display_curr_time" type="void" visibility="0x00" properties="0x00">
    <documentation>This sets the curr_time</documentation>
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;
uint32_t time_;

uint32_t time24h = Clock_Alarm_get_curr_time();
uint8_t ss = time24h % 10U;       //extract sub-second to append later
time24h /= 10; //convert to number of seconds

time_ = (me-&gt;time_mode == MODE_24H)?time24h:convert_24hformat_to_12h(time24h);
time_as_string = integertime_to_string(time_); //hh:mm:ss
time_as_string.concat('.');
time_as_string.concat(ss);

/*if mode is 12H , concatenate  am/pm information */
if(me-&gt;time_mode == MODE_12H){
    time_as_string.concat(' ');
    time_as_string.concat(get_am_or_pm(time24h));
}

display_write(time_as_string,row,col);</code>
   </operation>
   <operation name="display_clock_setting_time" type="void" visibility="0x00" properties="0x00">
    <documentation>Displays current time depending upon the time mode</documentation>
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;

time_as_string = integertime_to_string(me-&gt;temp_time); //hh:mm:ss

/*concatenate  am/pm information */
if(me-&gt;temp_format != FORMAT_24H){
    time_as_string.concat(' ');
    if(me-&gt;temp_format == FORMAT_AM)
        time_as_string.concat(&quot;AM&quot;);
    else
        time_as_string.concat(&quot;PM&quot;);
}

display_write(time_as_string,row,col);</code>
   </operation>
   <operation name="display_alarm_setting_time" type="void" visibility="0x00" properties="0x00">
    <documentation>Displays alarm time depending upon the time mode</documentation>
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;

time_as_string = integertime_to_string(me-&gt;temp_time); //hh:mm:ss

/*concatenate  am/pm information */
if(me-&gt;temp_format != FORMAT_24H){
    time_as_string.concat(' ');
    if(me-&gt;temp_format == FORMAT_AM)
        time_as_string.concat(&quot;AM&quot;);
    else
        time_as_string.concat(&quot;PM&quot;);
}

display_write(time_as_string,row,col);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1/2">
     <action>Clock_Alarm_set_curr_time(INITIAL_CURR_TIME);
me-&gt;alarm_time = INITIAL_ALARM_TIME;
me-&gt;time_mode = MODE_12H;
me-&gt;alarm_status = ALARM_OFF;</action>
     <initial_glyph conn="4,10,5,3,11,24,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Clock">
     <history type="deep" target="../2">
      <history_glyph conn="11,49,3,2,16,-5"/>
     </history>
     <tran trig="ALARM">
      <choice target="../../../2">
       <guard>(me-&gt;alarm_status == ALARM_ON &amp;&amp; Clock_Alarm_get_curr_time()/10 == me-&gt;alarm_time)</guard>
       <choice_glyph conn="87,154,4,0,6">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="87,150,2,-1,4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Ticking">
      <entry>Clock_Alarm_display_curr_time(me,TICKING_CURR_TIME_ROW,TICKING_CURR_TIME_COL);</entry>
      <exit>lcd_clear();</exit>
      <tran trig="SET" target="../../3/2">
       <action>me-&gt;temp_time = Clock_Alarm_get_curr_time()/10;
if(me-&gt;time_mode == MODE_12H) {
    if(get_am_or_pm(me-&gt;temp_time).equals(&quot;AM&quot;))
        me-&gt;temp_format = FORMAT_AM;
    else
        me-&gt;temp_format = FORMAT_PM;
    me-&gt;temp_time = convert_24hformat_to_12h(me-&gt;temp_time);
} else
    me-&gt;temp_format = FORMAT_24H;</action>
       <tran_glyph conn="54,33,1,3,30">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../3/3">
       <action>me-&gt;temp_time = me-&gt;alarm_time;
if(me-&gt;time_mode == MODE_12H) {
    if(get_am_or_pm(me-&gt;temp_time).equals(&quot;AM&quot;))
        me-&gt;temp_format = FORMAT_AM;
    else
        me-&gt;temp_format = FORMAT_PM;
    me-&gt;temp_time = convert_24hformat_to_12h(me-&gt;temp_time);
} else
    me-&gt;temp_format = FORMAT_24H;</action>
       <tran_glyph conn="54,38,1,3,16,67,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="TICK">
       <action>Clock_Alarm_display_curr_time(me,TICKING_CURR_TIME_ROW,TICKING_CURR_TIME_COL);</action>
       <tran_glyph conn="19,39,3,-1,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="19,24,35,20">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Settings">
      <exit>lcd_clear();
display_cursor_off_blinkoff();</exit>
      <tran trig="ABRT" target="../../2">
       <tran_glyph conn="78,58,3,2,-29,-14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../2">
       <tran_glyph conn="78,61,3,2,-37,-17">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Clock_Setting">
       <entry>Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_cursor_on_blinkon();</entry>
       <initial target="../3">
        <initial_glyph conn="91,41,5,3,5">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="OK">
        <action>if(me-&gt;temp_format != FORMAT_24H) {
    me-&gt;temp_time = convert_12hformat_to_24h(me-&gt;temp_time, (time_format_t)me-&gt;temp_format);
    me-&gt;time_mode = MODE_12H;
} else {
    me-&gt;time_mode = MODE_24H;
}
me-&gt;temp_time *= 10UL;
Clock_Alarm_set_curr_time(me-&gt;temp_time);</action>
        <choice>
         <guard>0</guard>
         <choice_glyph conn="90,60,5,-1,4">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="84,60,3,-1,6">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state name="cs_hour_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -= DIGIT2(GET_HOUR(me-&gt;temp_time)) * 60UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 60UL * 60UL);
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="122,46,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../4">
         <tran_glyph conn="139,43,1,3,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="122,33,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_hour_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="OK" target="../../2">
         <tran_glyph conn="113,43,1,3,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 3;
me-&gt;temp_time -= DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 60UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL * 60UL * 60UL);
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);</action>
         <tran_glyph conn="96,46,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="96,33,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_min_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -= DIGIT1(GET_MIN(me-&gt;temp_time)) * 10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL * 60UL);
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="148,46,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../5">
         <tran_glyph conn="165,43,1,3,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="148,33,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_min_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -= DIGIT2(GET_MIN(me-&gt;temp_time)) * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 60UL);
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);</action>
         <tran_glyph conn="174,46,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../6">
         <tran_glyph conn="191,43,1,0,3,9,-90,3">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="174,33,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_sec_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -= DIGIT1(GET_SEC(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL);
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);</action>
         <tran_glyph conn="96,68,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../7">
         <tran_glyph conn="113,65,1,3,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="96,55,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_sec_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -= DIGIT2(GET_SEC(me-&gt;temp_time));
me-&gt;temp_time += me-&gt;temp_digit;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="122,68,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../8">
         <tran_glyph conn="139,64,1,3,9">
          <action box="0,-3,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="122,55,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_format">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);
String msg[3] = {&quot;24H&quot;, &quot;AM &quot;, &quot;PM &quot;};
display_write(msg[me-&gt;temp_format], CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);</entry>
        <tran trig="SET">
         <action>String msg;
if(me-&gt;temp_format == FORMAT_24H) {
    me-&gt;temp_format = FORMAT_AM;
    msg = &quot;AM &quot;;
} else if(me-&gt;temp_format == FORMAT_AM) {
    me-&gt;temp_format = FORMAT_PM;
    msg = &quot;PM &quot;;
} else if(me-&gt;temp_format == FORMAT_PM) {
    me-&gt;temp_format = FORMAT_24H;
    msg = &quot;24H&quot;;
}
display_write(msg, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);</action>
         <tran_glyph conn="148,69,3,-1,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../9">
          <guard>is_time_set_error(me-&gt;temp_time, (time_format_t)me-&gt;temp_format)</guard>
          <choice_glyph conn="172,63,5,3,8">
           <action box="-3,1,13,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="168,63,1,-1,4">
          <action box="0,-3,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="148,55,20,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_error">
        <entry>display_cursor_off_blinkoff();
me-&gt;timeout = 0;</entry>
        <exit>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_COL_END);
me-&gt;timeout = 0;</exit>
        <initial target="../3">
         <initial_glyph conn="185,58,4,0,4">
          <action box="0,-2,10,2"/>
         </initial_glyph>
        </initial>
        <tran trig="OK" target="../..">
         <action>display_cursor_on_blinkon();</action>
         <tran_glyph conn="216,54,0,0,-28">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="SET">
         <tran_glyph conn="223,59,1,-1,-4">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state name="cs_err_on">
         <entry>display_write(&quot;Invalid time&quot;, CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../4">
           <guard>me-&gt;timeout &gt;= 20</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="200,65,5,3,5">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="197,65,1,-1,3">
           <action box="0,-3,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="183,62,14,8">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state name="cs_err_off">
         <entry>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_COL_END);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../3">
           <guard>me-&gt;timeout &gt;= 20</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="205,57,5,0,-17,5">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="213,62,0,-1,-5,-8">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="205,62,14,8">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state_glyph node="180,54,43,18">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="84,26,142,47">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="Alarm_Setting">
       <entry>Clock_Alarm_display_alarm_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);
Clock_Alarm_display_curr_time(me,ALARM_CURR_TIME_ROW,ALARM_CURR_TIME_COL);
display_cursor_on_blinkon();</entry>
       <initial target="../3">
        <initial_glyph conn="91,87,5,3,5">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="TICK">
        <action>Clock_Alarm_display_curr_time(me,ALARM_CURR_TIME_ROW,ALARM_CURR_TIME_COL);
if(QHsm_state(me) != Q_STATE_CAST(&amp;Clock_Alarm_as_arm) &amp;&amp; QHsm_state(me) != Q_STATE_CAST(&amp;Clock_Alarm_as_err_on) &amp;&amp; QHsm_state(me) != Q_STATE_CAST(&amp;Clock_Alarm_as_err_off))
    Clock_Alarm_display_alarm_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);

if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_hour_d1))
    display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_HOUR_D1_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_hour_d2))
    display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_HOUR_D2_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_min_d1))
    display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_MIN_D1_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_min_d2))
    display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_MIN_D2_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_sec_d1))
    display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_SEC_D1_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_sec_d2))
    display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_SEC_D2_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_format))
    display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_FMT_COL);
else if( QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_arm))
    display_set_cursor(ALARM_SETTING_ARM_MSG_ROW,ALARM_SETTING_ARM_MSG_COL);</action>
        <tran_glyph conn="84,101,3,-1,11">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="OK">
        <action>if(me-&gt;temp_format != FORMAT_24H) {
    me-&gt;temp_time = convert_12hformat_to_24h(me-&gt;temp_time, (time_format_t)me-&gt;temp_format);
    me-&gt;time_mode = MODE_12H;
} else {
    me-&gt;time_mode = MODE_24H;
}
me-&gt;alarm_time = me-&gt;temp_time;</action>
        <choice>
         <guard>0</guard>
         <choice_glyph conn="90,129,5,-1,5">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="84,129,3,-1,6">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state name="as_hour_d1">
        <entry>display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 3;
me-&gt;temp_time -= DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 60UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL * 60UL * 60UL);
Clock_Alarm_display_clock_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);
display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_HOUR_D1_COL);</action>
         <tran_glyph conn="96,93,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../4">
         <tran_glyph conn="113,90,1,3,10">
          <action box="0,-2,8,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="96,80,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_hour_d2">
        <entry>display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="OK" target="../../5">
         <tran_glyph conn="140,90,1,3,10">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -= DIGIT2(GET_HOUR(me-&gt;temp_time)) * 60UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 60UL * 60UL);
Clock_Alarm_display_clock_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);
display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="123,93,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="123,80,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_min_d1">
        <entry>display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -= DIGIT1(GET_MIN(me-&gt;temp_time)) * 10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL * 60UL);
Clock_Alarm_display_clock_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);
display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="150,93,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../6">
         <tran_glyph conn="167,90,1,3,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="150,80,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_min_d2">
        <entry>display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -= DIGIT2(GET_MIN(me-&gt;temp_time)) * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 60UL);
Clock_Alarm_display_clock_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);
display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_MIN_D2_COL);</action>
         <tran_glyph conn="176,93,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../7">
         <tran_glyph conn="193,90,1,0,3,9,-90,3">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="176,80,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_sec_d1">
        <entry>display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -= DIGIT1(GET_SEC(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL);
Clock_Alarm_display_clock_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);
display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_SEC_D1_COL);</action>
         <tran_glyph conn="96,115,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../8">
         <tran_glyph conn="113,112,1,3,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="96,102,17,16">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_sec_d2">
        <entry>display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -= DIGIT2(GET_SEC(me-&gt;temp_time));
me-&gt;temp_time += me-&gt;temp_digit;
Clock_Alarm_display_clock_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);
display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="122,115,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../9">
          <guard>me-&gt;temp_format != FORMAT_24H</guard>
          <choice_glyph conn="159,118,4,2,-6">
           <action box="0,-4,10,2"/>
          </choice_glyph>
         </choice>
         <choice>
          <guard>else</guard>
          <choice target="../../../../10">
           <guard>is_time_set_error(me-&gt;temp_time, (time_format_t)me-&gt;temp_format)</guard>
           <choice_glyph conn="168,118,5,3,11">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <choice target="../../../../11">
           <guard>else</guard>
           <choice_glyph conn="168,118,4,3,11,11">
            <action box="-5,6,10,2"/>
           </choice_glyph>
          </choice>
          <choice_glyph conn="159,118,5,-1,9">
           <action box="1,0,10,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="139,118,1,-1,20">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="122,102,17,19">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_format">
        <entry>display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_FMT_COL);
String msg[3] = {&quot;  &quot;, &quot;AM&quot;, &quot;PM&quot;};
display_write(msg[me-&gt;temp_format], ALARM_SETTING_TIME_ROW, ALARM_SETTING_TIME_FMT_COL);
display_set_cursor(ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_FMT_COL);</entry>
        <tran trig="SET">
         <action>String msg;
if(me-&gt;temp_format == FORMAT_PM) {
    me-&gt;temp_format = FORMAT_AM;
    msg = &quot;AM &quot;;
} else if(me-&gt;temp_format == FORMAT_AM) {
    me-&gt;temp_format = FORMAT_PM;
    msg = &quot;PM &quot;;
}
display_write(msg, ALARM_SETTING_TIME_ROW, ALARM_SETTING_TIME_FMT_COL);
display_set_cursor(ALARM_SETTING_TIME_ROW, ALARM_SETTING_TIME_FMT_COL);</action>
         <tran_glyph conn="148,110,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../10">
          <guard>is_time_set_error(me-&gt;temp_time, (time_format_t)me-&gt;temp_format)</guard>
          <choice_glyph conn="172,110,5,3,7">
           <action box="-3,1,13,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../11">
          <guard>else</guard>
          <choice_glyph conn="172,110,4,3,17,7">
           <action box="0,4,10,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="168,110,1,-1,4">
          <action box="0,-3,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="148,102,20,10">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_error">
        <entry>display_cursor_off_blinkoff();
me-&gt;timeout = 0;</entry>
        <exit>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_COL_END);
me-&gt;timeout = 0;</exit>
        <initial target="../4">
         <initial_glyph conn="187,106,4,0,4">
          <action box="0,-2,10,2"/>
         </initial_glyph>
        </initial>
        <tran trig="OK" target="../..">
         <action>display_erase_block(ALARM_SETTING_ERR_MSG_ROW, ALARM_SETTING_ERR_MSG_COL, ALARM_SETTING_ERR_MSG_COL_END);
Clock_Alarm_display_alarm_setting_time(me,ALARM_SETTING_TIME_ROW,ALARM_SETTING_TIME_COL);
display_cursor_on_blinkon();</action>
         <tran_glyph conn="217,102,0,0,-25">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="SET">
         <tran_glyph conn="223,106,1,-1,-5">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state name="as_err_off">
         <entry>display_erase_block(ALARM_SETTING_ERR_MSG_ROW, ALARM_SETTING_ERR_MSG_COL, ALARM_SETTING_ERR_MSG_COL_END);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../4">
           <guard>me-&gt;timeout &gt;= 20</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="207,106,5,0,-17,4">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="215,110,0,-1,-4,-8">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="207,110,14,8">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state name="as_err_on">
         <entry>display_write(&quot;Invalid time&quot;, ALARM_SETTING_ERR_MSG_ROW, ALARM_SETTING_ERR_MSG_COL);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../3">
           <guard>me-&gt;timeout &gt;= 20</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="202,113,5,3,5">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="199,113,1,-1,3">
           <action box="0,-3,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="185,110,14,8">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state_glyph node="179,102,44,18">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state name="as_arm">
        <entry>display_erase_block(ALARM_SETTING_TIME_ROW, ALARM_SETTING_TIME_COL, ALARM_SETTING_TIME_COL_END);
if(me-&gt;alarm_status == ALARM_ON)
    display_write(&quot;ALARM ON&quot;, ALARM_SETTING_ARM_MSG_ROW, ALARM_SETTING_TIME_COL);
else if(me-&gt;alarm_status == ALARM_OFF)
    display_write(&quot;ALARM OFF&quot;, ALARM_SETTING_ARM_MSG_ROW, ALARM_SETTING_TIME_COL);
display_set_cursor(ALARM_SETTING_ARM_MSG_ROW, ALARM_SETTING_ARM_MSG_COL);</entry>
        <tran trig="SET">
         <action>String msg;
if(me-&gt;alarm_status == ALARM_ON) {
    me-&gt;alarm_status = ALARM_OFF;
    msg = &quot;OFF&quot;;
} else if(me-&gt;alarm_status == ALARM_OFF) {
    me-&gt;alarm_status = ALARM_ON;
    msg = &quot;ON &quot;;
}
display_write(msg, ALARM_SETTING_ARM_MSG_ROW, ALARM_SETTING_ARM_MSG_COL);
display_set_cursor(ALARM_SETTING_ARM_MSG_ROW, ALARM_SETTING_ARM_MSG_COL);</action>
         <tran_glyph conn="179,134,3,-1,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="179,123,24,14">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="84,77,142,62">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="78,17,150,126">
       <exit box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="11,13,223,137"/>
    </state>
    <state name="Alarm_Triggered">
     <entry>display_cursor_off_blinkoff();
me-&gt;timeout = 0;</entry>
     <exit>lcd_clear();
sound_alarm_off();
lcd_backlight_on();
me-&gt;alarm_timeout = 0;
me-&gt;timeout = 0;</exit>
     <initial target="../4">
      <initial_glyph conn="76,165,4,0,5">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <tran_glyph conn="64,169,3,3,-56,-120,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TICK">
      <action>Clock_Alarm_display_curr_time(me,ALARM_CURR_TIME_ROW,ALARM_CURR_TIME_COL);</action>
      <choice target="../../../1/2">
       <guard>++me-&gt;alarm_timeout &gt;= 600U</guard>
       <choice_glyph conn="39,197,5,3,-35,-156,15">
        <action box="1,0,16,5"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="64,197,3,-1,-25">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="alarm_msg_off">
      <entry>display_erase_block(ALARM_MSG_ROW, ALARM_MSG_COL, ALARM_MSG_COL_END);
lcd_backlight_off();
sound_alarm_off();</entry>
      <tran trig="TICK">
       <action>++me-&gt;timeout;</action>
       <choice target="../../../4">
        <guard>me-&gt;timeout &gt;= 20</guard>
        <action>me-&gt;timeout = 0;</action>
        <choice_glyph conn="103,165,5,0,-18,5">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="130,170,0,-1,-5,-27">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="SET">
       <tran_glyph conn="113,181,3,-1,7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="113,170,22,22">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="alarm_msg_on">
      <entry>sound_alarm_on();
lcd_backlight_on();
display_write(&quot;ALARM&quot;, ALARM_MSG_ROW, ALARM_MSG_COL);</entry>
      <tran trig="TICK">
       <action>++me-&gt;timeout;</action>
       <choice target="../../../3">
        <guard>me-&gt;timeout &gt;= 20</guard>
        <action>me-&gt;timeout = 0;</action>
        <choice_glyph conn="102,188,5,3,11">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="93,188,1,-1,9">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="SET">
       <tran_glyph conn="71,183,3,-1,8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="71,170,22,22">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="64,160,78,43">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="296,220"/>
   </statechart>
  </class>
  <attribute name="super_ClockAlarm" type="QHsm* const" visibility="0x00" properties="0x00">
   <code>= &amp;Clock_Alarm_obj.super;</code>
  </attribute>
  <operation name="Clock_Alarm_ctor" type="void" visibility="0x00" properties="0x00">
   <code>QHsm_ctor(&amp;Clock_Alarm_obj.super, Q_STATE_CAST(&amp;Clock_Alarm_initial));</code>
  </operation>
  <directory name="../src">
   <file name="ClockAlarm_SM.cpp">
    <text>#include &lt;Arduino.h&gt;
#include &quot;qpn.h&quot;
#include &quot;lcd.h&quot;
#include &quot;ClockAlarm_SM.h&quot;
#include &quot;main.h&quot;

$declare${HSMs::Clock_Alarm}

// Prototypes of helper functions
void display_curr_time(Clock_Alarm *me,uint8_t row, uint8_t col);
String get_am_or_pm(uint32_t time24h);
void  display_write(String str_, uint8_t r, uint8_t c);
String integertime_to_string(uint32_t time_);
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm);
uint32_t convert_24hformat_to_12h(uint32_t time24h);
void display_cursor_on_blinkon(void);
void display_cursor_off_blinkoff(void);
void display_set_cursor(uint8_t r, uint8_t c);
bool is_time_set_error(uint32_t time, time_format_t format);
void display_erase_block(uint8_t row, uint8_t col_start, uint8_t col_end);
void sound_alarm_on(void);
void sound_alarm_off(void);

$define${HSMs::super_ClockAlarm}
$define${HSMs::Clock_Alarm_ctor}
$define${HSMs::Clock_Alarm}

ISR(TIMER1_COMPA_vect) {
    Clock_Alarm_update_curr_time();
}

/*
 * Description : Displays current time depending upon the time mode
 * param1: 'me' pointer
 * param2 : row number of the LCD
 * param3: column number of the LCD
 */
void display_curr_time(Clock_Alarm *me,uint8_t row, uint8_t col){
    String time_as_string;
    uint32_t time_;

    uint32_t time24h = Clock_Alarm_get_curr_time()/10; //convert to number of seconds
    uint8_t ss = time24h % 10U;       //extract sub-second to append later

    time_ = (me-&gt;time_mode == MODE_24H)?time24h:convert_24hformat_to_12h(time24h);
    time_as_string = integertime_to_string(time_); //hh:mm:ss
    time_as_string.concat('.');
    time_as_string.concat(ss);

    /*if mode is 12H , concatenate  am/pm information */
    if(me-&gt;time_mode == MODE_12H){
        time_as_string.concat(' ');
        time_as_string.concat(get_am_or_pm(time24h));
    }

    display_write(time_as_string,row,col);
}


/*
 * Description : Decodes AM/PM information from given time in 24H format
 * param1: Integer time in 24H format
 * return : A string value(&quot;AM&quot; or &quot;PM&quot;)
 */
String get_am_or_pm(uint32_t time24h){
    String ampm;
    uint8_t h = GET_HOUR(time24h);
    if(h == 0U){
        ampm = &quot;AM&quot;;
    }else if( h &gt; 12U){
        ampm = &quot;PM&quot;;
    }else if (h == 12U)
        ampm = &quot;PM&quot;;
    else
        ampm = &quot;AM&quot;;
    return ampm;
}

/*
 * Description: Writes a message to the LCD at given row and column number
 * param1 : Message to write in 'String' format
 * param2 : row number of the LCD
 * param2 : column number of the LCD
 */
void  display_write(String str_, uint8_t r, uint8_t c){
    lcd_set_cursor(c,r);
    lcd_print_string(str_);
}

/*
 * Description: converts an 'integer' time to 'String' time
 * param1 : time represented in terms of number of seconds
 * return : time as 'String' value in the format HH:MM:SS
 */
String integertime_to_string(uint32_t time_){
    uint8_t h,m,s;
    char buf[10]; //00:00:00+null
    h = GET_HOUR(time_); /* Extract how many hours the 'time_' represent */
    m = GET_MIN(time_);  /* Extract how many minutes the 'time_' represent */
    s = GET_SEC(time_);	 /* Extract how many seconds the 'time_' represent */
    sprintf(buf,&quot;%02d:%02d:%02d&quot;,h,m,s);
    return (String)buf;
}

/*
 * Description: Converts given integer time in 12H format to integer time 24H format
 * param1 : Integer time in 12H format
 * param2 : time format of type time_format_t
 * return : Integer time in 24H format
 */
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm){
    uint8_t hour;
    uint32_t time24h;
    hour = GET_HOUR(time12h);
    if(ampm == FORMAT_AM){
        time24h = (hour == 12)? (time12h-(12UL * 3600UL)) : time12h;
    }else{
        time24h = (hour == 12)? time12h : (time12h +(12UL * 3600UL));
    }
    return time24h;
}

/*
 * Description: Converts given integer time in 24H format to integer time 12H format
 * param1 : Integer time in 24H format
 * return : Integer time in 12H format
 */
uint32_t convert_24hformat_to_12h(uint32_t time24h){
    uint8_t hour;
    uint32_t time12h;
    hour = GET_HOUR(time24h);

    if(hour == 0)
        time12h = time24h + (12UL * 3600UL);
    else{
        if((hour &lt; 12UL) || (hour == 12UL))
            return time24h;
        else
            time12h = time24h - (12UL * 3600UL);
    }
    return time12h;
}

void display_cursor_on_blinkon(void) {
    lcd_cursor_show();
    lcd_cursor_blink();
}

void display_cursor_off_blinkoff(void) {
    lcd_cursor_off();
    lcd_cursor_blinkoff();
}

void display_set_cursor(uint8_t r, uint8_t c) {
    lcd_set_cursor(c,r);
}

bool is_time_set_error(uint32_t time, time_format_t format) {
    uint8_t h = GET_HOUR(time);
    return ((h &gt; 23) || ((h &gt; 12 || h == 0) &amp;&amp; format != FORMAT_24H));
}

void display_erase_block(uint8_t row, uint8_t col_start, uint8_t col_end) {
    uint8_t len = col_end - col_start;
    do {
        lcd_set_cursor(col_start++, row);
        lcd_print_char(' ');
    }while(len--);
}

void sound_alarm_on(void) {
    digitalWrite(PIN_BUZZER, HIGH);
}

void sound_alarm_off(void) {
    digitalWrite(PIN_BUZZER, LOW);
}
</text>
   </file>
   <file name="ClockAlarm_SM.h">
    <text>#ifndef CLOCK_ALARM_H
#define CLOCK_ALARM_H

enum ClockAlarm_Signals {
    SET_SIG = Q_USER_SIG,
    OK_SIG,
    ABRT_SIG,
    ALARM_SIG,
    TICK_SIG,
    IGNORE_SIG,
    MAX_SIG
};

enum time_mode {
    MODE_24H,
    MODE_12H
};

enum alarm_status {
    ALARM_OFF,
    ALARM_ON
};

typedef enum time_format {
    FORMAT_24H,
    FORMAT_AM,
    FORMAT_PM
}time_format_t;

#define MAX_TIME                (24UL * 60UL * 60UL * 10UL)
#define INITIAL_CURR_TIME       (((12UL * 3600UL) + (10UL * 60UL) + 10UL) * 10UL)
#define INITIAL_ALARM_TIME      (8UL * 60UL * 60UL)

#define GET_HOUR(seconds)       (seconds/3600UL)
#define GET_MIN(seconds)        ((seconds/60UL)%60UL)
#define GET_SEC(seconds)        (seconds % 60UL)
#define DIGIT1(d)               (d/10U)
#define DIGIT2(d)               (d%10U)

#define TICKING_CURR_TIME_ROW           0
#define TICKING_CURR_TIME_COL           3

#define CLOCK_SETTING_TIME_ROW          0
#define CLOCK_SETTING_TIME_COL          3
#define CLOCK_SETTING_TIME_HOUR_D1_COL  3
#define CLOCK_SETTING_TIME_HOUR_D2_COL  4
#define CLOCK_SETTING_TIME_MIN_D1_COL   6
#define CLOCK_SETTING_TIME_MIN_D2_COL   7
#define CLOCK_SETTING_TIME_SEC_D1_COL   9
#define CLOCK_SETTING_TIME_SEC_D2_COL   10
#define CLOCK_SETTING_TIME_FMT_COL      12
#define CLOCK_SETTING_ERR_MSG_ROW       1
#define CLOCK_SETTING_ERR_MSG_COL       3
#define CLOCK_SETTING_ERR_MSG_COL_END   14

#define ALARM_CURR_TIME_ROW             1
#define ALARM_CURR_TIME_COL             3
#define ALARM_SETTING_TIME_ROW          0
#define ALARM_SETTING_TIME_COL          3
#define ALARM_SETTING_TIME_COL_END      15
#define ALARM_SETTING_TIME_HOUR_D1_COL  3
#define ALARM_SETTING_TIME_HOUR_D2_COL  4
#define ALARM_SETTING_TIME_MIN_D1_COL   6
#define ALARM_SETTING_TIME_MIN_D2_COL   7
#define ALARM_SETTING_TIME_SEC_D1_COL   9
#define ALARM_SETTING_TIME_SEC_D2_COL   10
#define ALARM_SETTING_TIME_FMT_COL      12
#define ALARM_SETTING_ERR_MSG_ROW       0
#define ALARM_SETTING_ERR_MSG_COL       3
#define ALARM_SETTING_ERR_MSG_COL_END   14
#define ALARM_SETTING_ARM_MSG_ROW       0
#define ALARM_SETTING_ARM_MSG_COL       9

#define ALARM_MSG_ROW                   0
#define ALARM_MSG_COL                   5
#define ALARM_MSG_COL_END               9

$declare${HSMs::Clock_Alarm_ctor}
$declare${HSMs::super_ClockAlarm}

#endif  /* CLOCK_ALARM_H */</text>
   </file>
  </directory>
 </package>
</model>
